// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: packet.proto

#include "packet.pb.h"
#include "packet.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* DtoGService_method_names[] = {
  "/DtoGService/RegisterUser",
  "/DtoGService/GetCurrentGame",
  "/DtoGService/GetSummonerInfo",
};

std::unique_ptr< DtoGService::Stub> DtoGService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DtoGService::Stub> stub(new DtoGService::Stub(channel));
  return stub;
}

DtoGService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterUser_(DtoGService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCurrentGame_(DtoGService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSummonerInfo_(DtoGService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DtoGService::Stub::RegisterUser(::grpc::ClientContext* context, const ::SummonerName& request, ::BoolResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterUser_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BoolResult>* DtoGService::Stub::AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::SummonerName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::BoolResult>::Create(channel_.get(), cq, rpcmethod_RegisterUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::BoolResult>* DtoGService::Stub::PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::SummonerName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::BoolResult>::Create(channel_.get(), cq, rpcmethod_RegisterUser_, context, request, false);
}

::grpc::Status DtoGService::Stub::GetCurrentGame(::grpc::ClientContext* context, const ::SummonerName& request, ::CurrentGame* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCurrentGame_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::CurrentGame>* DtoGService::Stub::AsyncGetCurrentGameRaw(::grpc::ClientContext* context, const ::SummonerName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CurrentGame>::Create(channel_.get(), cq, rpcmethod_GetCurrentGame_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CurrentGame>* DtoGService::Stub::PrepareAsyncGetCurrentGameRaw(::grpc::ClientContext* context, const ::SummonerName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CurrentGame>::Create(channel_.get(), cq, rpcmethod_GetCurrentGame_, context, request, false);
}

::grpc::Status DtoGService::Stub::GetSummonerInfo(::grpc::ClientContext* context, const ::SummonerName& request, ::SummonerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSummonerInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::SummonerInfo>* DtoGService::Stub::AsyncGetSummonerInfoRaw(::grpc::ClientContext* context, const ::SummonerName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SummonerInfo>::Create(channel_.get(), cq, rpcmethod_GetSummonerInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SummonerInfo>* DtoGService::Stub::PrepareAsyncGetSummonerInfoRaw(::grpc::ClientContext* context, const ::SummonerName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SummonerInfo>::Create(channel_.get(), cq, rpcmethod_GetSummonerInfo_, context, request, false);
}

DtoGService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DtoGService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DtoGService::Service, ::SummonerName, ::BoolResult>(
          std::mem_fn(&DtoGService::Service::RegisterUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DtoGService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DtoGService::Service, ::SummonerName, ::CurrentGame>(
          std::mem_fn(&DtoGService::Service::GetCurrentGame), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DtoGService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DtoGService::Service, ::SummonerName, ::SummonerInfo>(
          std::mem_fn(&DtoGService::Service::GetSummonerInfo), this)));
}

DtoGService::Service::~Service() {
}

::grpc::Status DtoGService::Service::RegisterUser(::grpc::ServerContext* context, const ::SummonerName* request, ::BoolResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DtoGService::Service::GetCurrentGame(::grpc::ServerContext* context, const ::SummonerName* request, ::CurrentGame* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DtoGService::Service::GetSummonerInfo(::grpc::ServerContext* context, const ::SummonerName* request, ::SummonerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


