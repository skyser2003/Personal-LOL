// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: packet.proto

#include "packet.pb.h"
#include "packet.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* TestService_method_names[] = {
  "/TestService/TestSend",
};

std::unique_ptr< TestService::Stub> TestService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TestService::Stub> stub(new TestService::Stub(channel));
  return stub;
}

TestService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_TestSend_(TestService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TestService::Stub::TestSend(::grpc::ClientContext* context, const ::TestMessage& request, ::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TestSend_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Void>* TestService::Stub::AsyncTestSendRaw(::grpc::ClientContext* context, const ::TestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Void>::Create(channel_.get(), cq, rpcmethod_TestSend_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Void>* TestService::Stub::PrepareAsyncTestSendRaw(::grpc::ClientContext* context, const ::TestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Void>::Create(channel_.get(), cq, rpcmethod_TestSend_, context, request, false);
}

TestService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::TestMessage, ::Void>(
          std::mem_fn(&TestService::Service::TestSend), this)));
}

TestService::Service::~Service() {
}

::grpc::Status TestService::Service::TestSend(::grpc::ServerContext* context, const ::TestMessage* request, ::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


