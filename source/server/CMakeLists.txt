CMAKE_MINIMUM_REQUIRED (VERSION 3.10)
LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../../CMakeHelper/CMake)
INCLUDE(msvc_support)

# MSVC settings
RUNTIME_LIBRARY_OPTION(Release /MT)
RUNTIME_LIBRARY_OPTION(Debug /MTd)

# Project name
SET(GENERATOR_PROJECT_NAME "Generator")
SET(RIOTAPI_PROJECT_NAME "RiotApi")

# Common directory
SET(SERVER_DIR ${CMAKE_CURRENT_SOURCE_DIR})

SET(HEADER_DIR "header")
SET(SRC_DIR "src")
SET(PCH_DIR "pch")
SET(PCH_HEADER ${PCH_DIR}/stdafx.h)
SET(PCH_SRC ${PCH_DIR}/stdafx.cpp)

SET(BOOST_DIR ${SERVER_DIR}/external/boost)
SET(CURL_DIR ${SERVER_DIR}/external/libcurl/include)
SET(JSON_DIR ${SERVER_DIR}/external/nlohmann)

# Project directory
SET(GENERATOR_ROOT_DIR ${SERVER_DIR}/Generator)
SET(RIOTAPI_ROOT_DIR ${SERVER_DIR}/RiotApi)

# Exe
IF(${CMAKE_EXE_LINKER_FLAGS} MATCHES "/machine:x64")
	SET (ARCH "64")
ELSE()
	SET (ARCH "86")
ENDIF()

# Generate library projects
IF(WIN32)
	ADD_DEFINITIONS(-DUNICODE)
	ADD_DEFINITIONS(-D_UNICODE)
	ADD_COMPILE_OPTIONS("/EHsc")
	ADD_COMPILE_OPTIONS($<$<CONFIG:Debug>:/MDd>)
	ADD_COMPILE_OPTIONS($<$<CONFIG:Release>:/MD>)
ELSEIF(UNIX)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1z")
ENDIF()

ADD_SUBDIRECTORY(${GENERATOR_ROOT_DIR})
ADD_SUBDIRECTORY(${RIOTAPI_ROOT_DIR})