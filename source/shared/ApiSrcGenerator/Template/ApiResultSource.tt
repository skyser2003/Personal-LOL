<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)..\ApiSrcData\bin\Debug\ApiSrcData.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ApiSrcData" #>
<#@ output extension=".cpp" #>
<#

var internals = Helper.GetInternalStructs();
var results = Helper.GetResultStructs();

#>
#include "stdafx.h"
#include "ApiResultStruct.h"

#include "Functional.h"

#define BIND_ATTR(name) name(HasFailed() ? decltype(name){} : json[#name].get<decltype(name)>())
#define BIND_ATTR_RAW(name) name(json[#name].get<decltype(name)>())
#define BIND_ATTR_INTERNAL(name) name(HasFailed() ? decltype(name)({}) : InitializeInternal<decltype(name)>(json["name"], #name))
#define BIND_ATTR_INTERNAL_RAW(name) name(InitializeInternal<decltype(name)>(json["name"], #name))
#define BIND_ATTR_VECTOR(name) name(HasFailed() ? decltype(name)({}) : InitializeVector<decltype(name)::value_type>(json[#name]))
#define BIND_ATTR_VECTOR_RAW(name) name(InitializeVector<decltype(name)::value_type>(json[#name]))

namespace RiotApi
{
	template <typename T>
	std::vector<T> InitializeVector(const nlohmann::json& json)
	{
		return FTL::TransformToVector(json, [](const auto& elem) -> T { return T(elem); });
	}

	template <typename T>
	T InitializeInternal(const nlohmann::json& json, const std::string& name)
	{
		return T(json[name]);
	}

<#
foreach (var pair in internals)
{
	var type = pair.Key;
	var members = pair.Value;

	Func<System.Reflection.FieldInfo, string> printComma = member => member == members.Last() ? "" : ",";
#>
	<#= $"{type.Name}::{type.Name}" #>() = default;
	<#= $"{type.Name}::{type.Name}" #>(const nlohmann::json& json) :
<#
	foreach(var member in members)
	{
		var memberType = member.FieldType;

		var isList = Helper.IsGeneric(memberType) && Helper.IsList(memberType);
		var isInternal = Helper.IsInternalStruct(memberType);

		if(isList)
		{
#>
		BIND_ATTR_VECTOR_RAW(<#= member.Name #>)<#= printComma(member) #>
<#
		}
		else if(isInternal)
		{
#>
		BIND_ATTR_INTERNAL_RAW(<#= member.Name #>)<#= printComma(member) #>
<#
		}
		else
		{
#>
		BIND_ATTR_RAW(<#= member.Name #>)<#= printComma(member) #>
<#
		}
	}
#>
	{}

<#
}
#>
	FailedApiResult::FailedApiResult(const nlohmann::json& json) :
		FailedApiResult(json.find("status") != json.end() &&
			json["status"].find("message") != json["status"].end() &&
			json["status"].find("status_code") != json["status"].end(),
			json)
	{
	}

	FailedApiResult::FailedApiResult(bool hasFailed, const nlohmann::json& json) :
		message(hasFailed ? json["status"]["message"].get<decltype(message)>() : ""),
		status_code(hasFailed ? json["status"]["status_code"].get<decltype(status_code)>() : -1)
	{

	}

	FailedApiResult::~FailedApiResult() = default;

	bool FailedApiResult::HasFailed() const
	{
		return status_code != -1;
	}

<#
foreach (var pair in results)
{
	var type = pair.Key;
	var members = pair.Value;

	Func<System.Reflection.FieldInfo, string> printComma = member => member == members.Last() ? "" : ",";
#>
	ApiResult<ApiType::<#= type.Name #>>::ApiResult(const nlohmann::json& json) :
		FailedApiResult(json),
<#
	foreach(var member in members)
	{
		var memberType = member.FieldType;

		var isList = Helper.IsGeneric(memberType) && Helper.IsList(memberType);
		var isInternal = Helper.IsInternalStruct(memberType);

		if(isList)
		{
#>
		BIND_ATTR_VECTOR(<#= member.Name #>)<#= printComma(member) #>
<#
		}
		else if(isInternal)
		{
#>
		BIND_ATTR_INTERNAL(<#= member.Name #>)<#= printComma(member) #>
<#
		}
		else
		{
#>
		BIND_ATTR(<#= member.Name #>)<#= printComma(member) #>
<#
		}
	}
#>
	{}

<#
}
#>
}