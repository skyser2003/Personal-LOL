<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)..\ApiSrcData\bin\Debug\ApiSrcData.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ApiSrcData" #>
<#@ output extension=".h" #>
<#

var internals = Helper.GetInternalStructs();
var results = Helper.GetResultStructs();

#>
#pragma once

#include <string>
#include <vector>
#include "json.hpp"

#include "ApiType.h"

namespace RiotApi
{
	// Sub data structs
<#
foreach (var pair in internals)
{
	var type = pair.Key;
	var members = pair.Value;
#>
	struct <#= type.Name #>
	{
		<#= type.Name #>();
		<#= type.Name #>(const nlohmann::json& json);

<#
foreach(var member in members)
{
#>
		<#= Helper.GetCppTypeName(member.FieldType) #> <#= member.Name #>;
<#
}
#>
	};

<#
}
#>
	// Failed response
	class FailedApiResult
	{
	public:
		FailedApiResult(const nlohmann::json& json);
		virtual ~FailedApiResult();

		bool HasFailed() const;

		const std::string message;
		const int status_code;

	private:
		FailedApiResult(bool hasFailed, const nlohmann::json& json);
	};

	// Declaration only
	template <ApiType type>
	class ApiResult;

	template <>
	class ApiResult<ApiType::SUMMONER_SUMMONERS_BY_NAME> : public FailedApiResult
	{
	public:
		ApiResult(const nlohmann::json& json);

		const int profileIconId;
		const std::string name;
		const long summonerLevel;
		const long revisionDate;
		const long id;
		const long accountId;
	};

	template <>
	class ApiResult<ApiType::SPECTATOR_ACTIVE_GAMES_BY_SUMMONER> : public FailedApiResult
	{
	public:
		ApiResult(const nlohmann::json& json);

		long gameId;
		long gameStartTime;
		std::string platformId;
		std::string gameMode;
		long mapId;
		std::string gameType;
		std::vector<BannedChampions> bannedChampions;
		Observer observer;
		std::vector<CurrentGameParticipant> participants;
		long gameLength;
		long gameQueueConfigId;
	};

	template <>
	class ApiResult<ApiType::MATCH_MATCHLISTS_BY_ACCOUNT> : public FailedApiResult
	{
	public:
		ApiResult(const nlohmann::json& json);

		const std::vector<MatchReferenceDto> matches;
		const int totalGames;
		const int startIndex;
		const int endIndex;
	};
}